<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
       ">

    <security:http auto-config="true" use-expressions="true">
        <security:form-login login-page="/auth/login.do" />
        <!-- 프로바이더 만들기 전 초기 로그인 세팅
        <security:form-login
            login-page="/auth/login.do"
            login-processing-url="/login"
            authentication-success-handler-ref="customLoginSuccessHandler"
        />
        -->
        <!-- 초기 로그인 세팅 관련
            authentication-success-forward-url 을 사용하게 되면, 상단 주소 /login 이 변경되지 않음
            login-processing-url="/login" 을 명시적으로 지정하면, login.jsp에서 action="/login"으로 지정해야함
            login-processing-url을 명시적으로 지정하지 않으면 form 액션도 default 값(/login)으로 자동 세팅되어 적지 않아도 상관 없음
         -->

        <!-- 로그아웃 -->
        <security:logout invalidate-session="true" logout-url="/auth/logout.do" success-handler-ref="logoutSuccessHandler"/>

        <security:intercept-url pattern="/resources/**" access="permitAll"/>
        <security:intercept-url pattern="/auth/login.do" access="permitAll"/>
        <security:intercept-url pattern="/" access="permitAll"/>
        <security:intercept-url pattern="/index.do" access="permitAll"/>
        <security:intercept-url pattern="/join/member.do" access="permitAll"/>
        <security:intercept-url pattern="/join/getMember.do" access="permitAll"/>
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>

        <security:csrf disabled="true"/><!-- 외부 회원가입 시 disable true로 설정을 해 줘야한다. 나머지 공격에 대한 방어 코드 작성을 알아봐야함-->

        <security:custom-filter ref="customAuthenticationProcessingFilter" before="FORM_LOGIN_FILTER" />
        <!-- <security:custom-filter ref="customUrlAuthenticationFilter" after="BASIC_AUTH_FILTER" /> -->
        <!-- <security:custom-filter ref="customDuplicationLoginFilter" after="LAST" /> -->

    </security:http>

    <security:authentication-manager alias="customAuthenticationManager">
        <security:authentication-provider ref="customAuthenticationProvider" />
<!--        <security:authentication-provider>-->
<!--            <security:user-service>-->
<!--                <security:user name="user" password="{noop}123" authorities="ROLE_USER" />-->
<!--                <security:user name="admin" password="{noop}123" authorities="ROLE_ADMIN" />-->
<!--                <security:user name="guest" password="{noop}123" authorities="ROLE_GUEST" />-->
<!--            </security:user-service>-->
<!--        </security:authentication-provider>-->
    </security:authentication-manager>

    <beans:bean id="httpsCookieFilter" class="com.example.dingko.auth.security.CustomHttpsCookieFilter" />

    <beans:bean id="customAuthenticationProcessingFilter" class="com.example.dingko.auth.security.CustomAuthenticationProcessingFilter">
        <beans:property name="authenticationManager" ref="customAuthenticationManager"/>

        <!-- 성공 -->
        <beans:property name="authenticationSuccessHandler">
            <beans:bean class="com.example.dingko.auth.security.CustomAuthenticationSuccessHandler">
                <beans:property name="defaultTargetUrl" value="/main.do"/>
            </beans:bean>
        </beans:property>

        <!-- 실패 -->
        <beans:property name="authenticationFailureHandler">
            <beans:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <beans:property name="defaultFailureUrl" value="/auth/login.do?error=access-fail"/>
            </beans:bean>
        </beans:property>

    </beans:bean>

    <!-- 핸들러 사용 전
    <beans:bean id="customLoginSuccessHandler" class="com.example.dingko.auth.security.CustomLoginSuccessHandler" /> -->
    <beans:bean id="customAuthenticationProvider" class="com.example.dingko.auth.security.CustomAuthenticationProvider" />
    <beans:bean id="logoutSuccessHandler" class="com.example.dingko.auth.security.CustomAuthenticationLogoutSuccessHandler" />
</beans>